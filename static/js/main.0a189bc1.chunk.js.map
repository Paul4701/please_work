{"version":3,"sources":["template.js","meme.js","App.js","index.js"],"names":["Template","templates","setMeme","className","map","template","onClick","style","background","url","backgroundSize","console","log","id","Meme","meme","useState","template_id","username","password","boxes","form","setform","src","Array","box_count","el","ind","type","placeholder","onChange","e","newboxes","text","target","value","box","fetch","then","res","json","data","href","App","setTemplates","useEffect","memes","ReactDOM","render","document","getElementById"],"mappings":"6MAgBeA,EAhBA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,UAAUC,EAAW,EAAXA,QACvB,OACJ,qBAAKC,UAAU,YAAf,SACCF,EAAUG,KAAI,SAACC,GAAD,OACX,qBAAuBF,UAAU,WAAWG,QAAS,WACjDJ,EAAQG,IADZ,SAGE,qBAAKF,UAAU,QAAQI,MAAO,CAACC,WAAW,OAAD,OAAQH,EAASI,IAAjB,KAAwBC,eAAe,SAAhF,SACLC,QAAQC,IAAI,UAJCP,EAASQ,U,iBCqDRC,EAxDJ,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAKb,EAAW,EAAXA,QACd,EAAqBc,mBAAS,CAC5BC,YAAYF,EAAKF,GACjBK,SAAS,SACTC,SAAS,kBACTC,MAAM,KAJR,mBAAOC,EAAP,KAAYC,EAAZ,KA0BJ,OAAQ,sBAAKnB,UAAU,OAAf,UACJ,qBAAKoB,IAAKR,EAAKN,MACf,8BAGI,YAAIe,MAAMT,EAAKU,YAAYrB,KAAI,SAACsB,EAAGC,GAGhC,OAAO,uBAAiBC,KAAK,OAAOC,YAAW,uBAAkBF,EAAI,GAAKG,SAAU,SAACC,GACjF,IAAMC,EAASX,EAAKD,MACpBY,EAASL,GAAK,CAACM,KAAKF,EAAEG,OAAOC,OAC7Bb,EAAQ,2BAAID,GAAL,IAAUD,MAAMY,OAHRL,QAWtB,gCACI,wBAAQrB,QAxCG,WAEf,IAAIG,EAAI,qDAAD,OAAsDY,EAAKJ,YAA3D,qBAAmFI,EAAKH,SAAxF,qBAA6GG,EAAKF,UACzHE,EAAKD,MAAMhB,KAAI,SAACgC,EAAIT,GACrBlB,GAAG,iBAAckB,EAAd,mBAA4BS,EAAIH,SAElCI,MAAM5B,GAAK6B,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAACG,GAErCvC,EAAQ,2BAAIa,GAAL,IAAUN,IAAIgC,EAAKA,KAAKhC,WAgC7B,2BACA,wBAAQH,QAAS,kBAAIJ,EAAQ,OAA7B,6BACN,oBAAGwC,KAAM3B,EAAKN,IAAKyB,OAAO,SAA1B,UAAmC,8CAAnC,UAEE,0DC3BOS,MAnBf,WAEE,MAA8B3B,mBAAS,IAAvC,mBAAMf,EAAN,KAAgB2C,EAAhB,KACA,EAAoB5B,mBAAS,MAA7B,mBAAMD,EAAN,KAAWb,EAAX,KAMA,OAJD2C,qBAAU,WACRR,MAAM,qCAAqCC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAACG,GAAD,OAAQG,EAAaH,EAAKA,KAAKK,YACrG,IAGH,mCACA,sBAAK3C,UAAU,MAAf,UACE,gDACS,OAAPY,EAAc,cAAC,EAAD,CAAUd,UAAWA,EAAWC,QAASA,IAAY,cAAC,EAAD,CAAMa,KAAMA,EAAMb,QAASA,UCflG6C,IAASC,OAEN,mCAAE,cAAC,EAAD,MAEHC,SAASC,eAAe,W","file":"static/js/main.0a189bc1.chunk.js","sourcesContent":["const Template=({templates,setMeme})=>{\r\n    return(\r\n<div className=\"templates\">\r\n{templates.map((template)=>(\r\n    <div key={template.id} className='template' onClick={()=>{\r\n        setMeme(template)\r\n    }}>\r\n      <div className=\"image\" style={{background:`url(${template.url})`,backgroundSize:'cover'}}>\r\n{console.log('div')}\r\n      </div>\r\n    </div>\r\n  ))}\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Template;","import { useState } from \"react\";\r\nconst Meme=({meme,setMeme})=>{\r\n    const [form,setform]=useState({\r\n      template_id:meme.id,\r\n      username:\"teasty\",\r\n      password:\"PPS$Asr52ttCfaF\",\r\n      boxes:[],\r\n    })\r\n    const generateMeme=()=>{\r\n   \r\n        let url=`https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box,ind)=>{\r\n       url += `&boxes[${ind}][text]=${box.text}`;\r\n        });\r\n        fetch(url).then(res=>res.json()).then((data)=>{\r\n           \r\n          setMeme({...meme,url:data.data.url})\r\n        })\r\n        \r\n    }\r\n   \r\n\r\n    \r\n    const download=()=>{\r\n    \r\n\r\n     \r\n    }\r\nreturn (<div className=\"meme\">\r\n    <img src={meme.url} />\r\n    <div>\r\n  \r\n       {\r\n        [...Array(meme.box_count)].map((el,ind)=>{\r\n           \r\n          \r\n           return(<input key={ind} type=\"text\" placeholder={`meme cpation ${ind+1}`} onChange={(e)=>{\r\n               const newboxes=form.boxes;\r\n               newboxes[ind]={text:e.target.value};\r\n               setform({...form,boxes:newboxes})\r\n           }} ></input>)\r\n         \r\n        })\r\n    }\r\n   \r\n    </div>\r\n  \r\n        <div>\r\n            <button onClick={generateMeme}>Generate Meme</button>\r\n            <button onClick={()=>setMeme(null)}>choose Template</button>\r\n      <a href={meme.url} target=\"_blank\"><button  >download</button> </a>      \r\n        </div>\r\n        <div>CREATED BY PINTU :)</div>\r\n    \r\n</div>)\r\n}\r\n\r\nexport default Meme;","import { template } from \"@babel/core\";\nimport React,{useState,useEffect} from \"react\";\nimport './App.css'\nimport Template from \"./template\";\nimport Meme from \"./meme\";\n\nfunction App() {\n\n  const[templates,setTemplates]=useState([]);\n  const[meme,setMeme]=useState(null);\n\n useEffect(()=>{\n   fetch('https://api.imgflip.com/get_memes').then(res=>res.json()).then((data)=>setTemplates(data.data.memes))\n },[]\n )\n  return (\n<>\n<div className=\"App\">\n  <h4>MEME GENERATOR</h4>\n   {meme===null ? <Template templates={templates} setMeme={setMeme}/> :<Meme meme={meme} setMeme={setMeme}/> }\n</div>\n</>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(\n  \n   <><App/></>\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}